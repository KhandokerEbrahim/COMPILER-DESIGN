%{
	#include<stdio.h>
	void yyerror(char *);
}%

%token INTEGER

%%

    line:
    line expr: '\n' { printf("%d\n",$2)};
    | line '\n'
  |
  error '\n' {yyerror("Reenter Previous Line " ); yyerrok; };

  expr :
       INTEGER{ $s = $1; }
       | expr '+' expr{ $$ = $1 + $3 ;}
       | expr '-' expr{ $$ = $1 - $3 ;}
       | expr '*' expr{ $$ = $1 * $3 ;}
       | expr '/' expr{ $$ = $1 / $3 ;}
       ;

%%
void yyerror(char *s){
fprint(stderr,"%s\n",s);
}
int main(void)
{
yyparse();
return 0;
}



// lex file


%{
	#include<stdlib.h>
	#include "y.tab.h"
%}


%%

 [0-9]+ {
 yyval = atoi(yytext);
 return INTEGER;
 }
[ \t ] ;    ///skip white file

.|\n {return yytext[0];}

  
%%
int yywrap(void)
{

	return 1;
}





