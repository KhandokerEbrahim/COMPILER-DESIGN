// lex 

%{
	#include<stdlib.h>
	#include"y.tab.h"
%}

%%
[0-9]+ {
yylval = atoi(yytext);
return INTEGER;
}

[ \t] ; /*skip whitespace*/
.|\n {return yytext[0];}
%%
int yywrap(void){
return 1;
}


//yaac

%{
	#include<stdio.h>
	void yyerror(char *);
%}

%token INTEGER
%% 
line:
     line expr '\n' {printf("%d\n", $2);}
     | line '\n'
     |
     |error '\n' {yyerror("Reenter prev line"); yyerrok;}
     ;
expr:
INTEGER{ $$ = $1; }
| expr '+' expr {$$=$1+$3;}
| expr '-' expr {$$=$1-$3;}
| expr '*' expr {$$=$1*$3;}
| expr '/' expr {$$=$1/$3;}
;
%%
void yyerror(char *s){
fprintf(stderr,"%s\n",s);}
int main(void){
yyparse();
return 0;
}
